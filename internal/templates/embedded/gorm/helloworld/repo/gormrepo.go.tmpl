package repo

import (
	"context"
	"errors"
	"{{.Name}}/helloworld/repositoryerrors"
	"{{.Name}}/internal/models"

	"gorm.io/gorm"
)

type gormRepo struct {
	db *gorm.DB
}

func NewGormRepo(db *gorm.DB) *gormRepo {
	return &gormRepo{
		db: db,
	}
}

func (r *gormRepo) SaveGreetedUser(ctx context.Context, user *models.User) error {
	return r.db.WithContext(ctx).Model(&models.User{}).FirstOrCreate(user, map[string]any{"name": user.Name}).Error
}

func (r *gormRepo) GetUser(ctx context.Context, name string) (models.User, error) {
	var (
		user models.User
		err  error
	)

	err = r.db.WithContext(ctx).Model(&models.User{}).First(&user, map[string]any{"name": name}).Error
	if err != nil {
		switch {
		case errors.Is(err, gorm.ErrRecordNotFound):
			return models.User{}, repositoryerrors.ErrRecordNotFound
		default:
			return models.User{}, err
		}
	}

	return user, nil
}

func (r *gormRepo) GetAllGreetedUsers(ctx context.Context) ([]models.User, error) {
	var (
		users []models.User
		err   error
	)

	err = r.db.Model(&models.User{}).Find(&users).Error
	if err != nil {
		switch {
		case errors.Is(err, gorm.ErrRecordNotFound):
			return []models.User{}, nil
		default:
			return []models.User{}, err
		}
	}

	return users, nil
}
